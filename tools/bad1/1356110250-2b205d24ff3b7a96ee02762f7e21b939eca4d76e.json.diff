{"key": "resources", "op": "descend"}
{"key": "/etc/salt/minion", "op": "descend"}
{"key": "parameters", "op": "descend"}
{"key": "content", "op": "descend"}
{"value": "##########################################\n\n# Per default the minion will automatically include all config files\n# from minion.d/*.conf (minion.d is a directory in the same directory\n# as the main minion config file).\n#default_include: minion.d/*.conf\n\n# Set the location of the salt master server, if the master server cannot be\n# resolved, then the minion will fail to start.\nmaster: sockpuppet.pmtpa.wmnet\n\n# Set the port used by the master reply and authentication server\nmaster_port: 4506\n\n# The user to run salt\nuser: root\n\n# The root directory prepended to these options: pki_dir, cachedir, log_file.\n#root_dir: /\n\n# The directory to store the pki information in\n#pki_dir: /etc/salt/pki\n\n# Explicitly declare the id for this minion to use, if left commented the id\n# will be the hostname as returned by the python call: socket.getfqdn()\n# Since salt uses detached ids it is possible to run multiple minions on the\n# same machine but with different ids, this can be useful for salt compute\n# clusters.\nid: db1046.pdl.cmu.local\n\n# Append a domain to a hostname in the event that it does not exist.  This is\n# useful for systems where socket.getfqdn() does not actually result in a\n# FQDN (for instance, Solaris).\n#append_domain:\n\n# If the connection to the server is interrupted, the minion will\n# attempt to reconnect. sub_timeout allows you to control the rate\n# of reconnection attempts (in seconds). To disable reconnects, set\n# this value to 0.\n#sub_timeout: 60\n\n# Where cache data goes\n#cachedir: /var/cache/salt\n\n# The minion can locally cache the return data from jobs sent to it, this\n# can be a good way to keep track of jobs the minion has executed\n# (on the minion side). By default this feature is disabled, to enable\n# set cache_jobs to True\ncache_jobs: False\n\n# When waiting for a master to accept the minion's public key, salt will\n# continuously attempt to reconnect until successful. This is the time, in\n# seconds, between those reconnection attempts.\n#acceptance_wait_time = 10\n\n# When healing a dns_check is run, this is to make sure that the originally\n# resolved dns has not changed, if this is something that does not happen in\n# your environment then set this value to False.\ndns_check: False\n\n\n# The minion can include configuration from other files. To enable this,\n# pass a list of paths to this option. The paths can be either relative or\n# absolute; if relative, they are considered to be relative to the directory\n# the main minion configuration file lives in (this file). Paths can make use\n# of shell-style globbing. If no files are matched by a path passed to this\n# option then the minion will log a warning message.\n#\n#\n# Include a config file from some other path:\n#include: /etc/salt/extra_config\n#\n# Include config from several files and directories:\n#include:\n# - /etc/salt/extra_config\n# - /etc/roles/webserver\n\n#####   Minion module management     #####\n##########################################\n# Disable specific modules. This allows the admin to limit the level of\n# access the master has to the minion\n#disable_modules: [cmd,test]\n#disable_returners: []\n#\n# Modules can be loaded from arbitrary paths. This enables the easy deployment\n# of third party modules. Modules for returners and minions can be loaded.\n# Specify a list of extra directories to search for minion modules and\n# returners. These paths must be fully qualified!\nmodule_dirs: []\nreturner_dirs: []\nstates_dirs: []\nrender_dirs: []\n#\n# A module provider can be statically overwritten or extended for the minion\n# via the providers option, in this case the default module will be\n# overwritten by the specified module. In this example the pkg module will\n# be provided by the yumpkg5 module instead of the system default.\n#\n# providers:\n#   pkg: yumpkg5\n#\n# Enable Cython modules searching and loading. (Default: False)\n#cython_enable: False\n\n#####    State Management Settings    #####\n###########################################\n# The state management system executes all of the state templates on the minion\n# to enable more granular control of system state management. The type of\n# template and serialization used for state management needs to be configured\n# on the minion, the default renderer is yaml_jinja. This is a yaml file\n# rendered from a jinja template, the available options are:\n# yaml_jinja\n# yaml_mako\n# json_jinja\n# json_mako\n#\nrenderer: yaml_jinja\n#\n# state_verbose allows for the data returned from the minion to be more\n# verbose. Normally only states that fail or states that have changes are\n# returned, but setting state_verbose to True will return all states that\n# were checked\nstate_verbose: False\n#\n# autoload_dynamic_modules Turns on automatic loading of modules found in the\n# environments on the master. This is turned on by default, to turn of\n# autoloading modules when states run set this value to False\n#autoload_dynamic_modules: True\n#\n# clean_dynamic_modules keeps the dynamic modules on the minion in sync with\n# the dynamic modules on the master, this means that if a dynamic module is\n# not on the master it will be deleted from the minion. By default this is\n# enabled and can be disabled by changing this value to False\n#clean_dynamic_modules: True\n#\n# Normally the minion is not isolated to any single environment on the master\n# when running states, but the environment can be isolated on the minion side\n# by statically setting it. Remember that the recommended way to manage\n# environments is to isolate via the top file.\n#environment: None\n#\n# If using the local file directory, then the state top file name needs to be\n# defined, by default this is top.sls.\n#state_top: top.sls\n\n#####     File Directory Settings    #####\n##########################################\n# The Salt Minion can redirect all file server operations to a local directory,\n# this allows for the same state tree that is on the master to be used if\n# copied completely onto the minion. This is a literal copy of the settings on\n# the master but used to reference a local directory on the minion.\n\n# Set the file client, the client defaults to looking on the master server for\n# files, but can be directed to look at the local file directory setting\n# defined below by setting it to local.\n#file_client: remote\n\n# The file directory works on environments passed to the minion, each environment\n# can have multiple root directories, the subdirectories in the multiple file\n# roots cannot match, otherwise the downloaded files will not be able to be\n# reliably ensured. A base environment is required to house the top file.\n# Example:\n# file_roots:\n#   base:\n#     - /srv/salt/\n#   dev:\n#     - /srv/salt/dev/services\n#     - /srv/salt/dev/states\n#   prod:\n#     - /srv/salt/prod/services\n#     - /srv/salt/prod/states\n#\n# Default:\n#file_roots:\n#  base:\n#    - /srv/salt\n\n# The hash_type is the hash to use when discovering the hash of a file in\n# the minion directory, the default is md5, but sha1, sha224, sha256, sha384\n# and sha512 are also supported.\nhash_type: md5\n\n# The Salt pillar is searched for locally if file_client is set to local. If\n# this is the case, and pillar data is defined, then the pillar_roots need to\n# also be configured on the minion:\n#pillar_roots:\n#  base:\n#    - /srv/pillar\n\n######        Security settings       #####\n###########################################\n# Enable \"open mode\", this mode still maintains encryption, but turns off\n# authentication, this is only intended for highly secure environments or for\n# the situation where your keys end up in a bad state. If you run in open mode\n# you do so at your own risk!\n#open_mode: False\n\n# Enable permissive access to the salt keys.  This allows you to run the\n# master or minion as root, but have a non-root group be given access to\n# your pki_dir.  To make the access explicit, root must belong to the group\n# you've given access to. This is potentially quite insecure.\n#permissive_pki_access: False\n\n\n######         Thread settings        #####\n###########################################\n# Disable multiprocessing support, by default when a minion receives a\n# publication a new process is spawned and the command is executed therein.\n#multiprocessing: True\n\n######         Logging settings       #####\n###########################################\n# The location of the minion log file\n#log_file: /var/log/salt/minion\n#\n# The level of messages to send to the log file.\n# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.\n# Default: 'warning'\n#log_level: warning\n#log_level_logfile:\n#\n# The date and time format used in log messages. Allowed date/time formating\n# can be seen on http://docs.python.org/library/time.html#time.strftime\n#log_datefmt: '%H:%M:%S'\n#\n# The format of the console logging messages. Allowed formatting options can\n# be seen on http://docs.python.org/library/logging.html#logrecord-attributes\n#log_fmt_console: '[%(levelname)-8s] %(message)s'\n#log_fmt_logfile: '%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'\n#\n# Logger levels can be used to tweak specific loggers logging levels.\n# For example, if you want to have the salt library at the 'warning' level,\n# but you still wish to have 'salt.modules' at the 'debug' level:\n#   log_granular_levels: {\n#     'salt': 'warning',\n#     'salt.modules': 'debug'\n#   }\n#\n#log_granular_levels: {}\n\n######      Module configuration      #####\n###########################################\n# Salt allows for modules to be passed arbitrary configuration data, any data\n# passed here in valid yaml format will be passed on to the salt minion modules\n# for use. It is STRONGLY recommended that a naming convention be used in which\n# the module name is followed by a . and then the value. Also, all top level\n# data must be applied via the yaml dict construct, some examples:\n#\n# A simple value for the test module:\n#test.foo: foo\n#\n# A list for the test module:\n#test.bar: [baz,quo]\n#\n# A dict for the test module:\n#test.baz: {spam: sausage, cheese: bread}\n\nmaster_finger: e6:f5:71:f5:b0:5c:45:7b:b1:f2:1d:06:4e:b9:98:9f\n\n\ngrains:\n  realm: production\n  site: eqiad\n  cluster: misc\n", "op": "swap"}
{"op": "ascend"}
{"op": "ascend"}
{"op": "ascend"}
{"op": "ascend"}
